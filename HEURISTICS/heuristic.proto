// RPC interface between heuristic_server and eprover sandbox
//
// Warning: This proto is for wire communication only.  There is no guarantee
// of binary stability.

syntax = "proto3";

package deepmath;

// Compact representation of clauses with strings already converted to ints
message FastClause {
  message Term {
    int32 id = 1;  // Vocabulary id (whether number, variable, or function)
    repeated Term args = 2;
  }

  // Either left (for predicates) or left == right, possibly negated
  message Equation {
    bool negated = 1;
    Term left = 2;
    Term right = 3;  // If the equation is a predicate, right will be missing
  }

  // A clause is a disjunction of several equations
  repeated Equation equations = 1;
}

// Sent from sandboxee to sandbox to request information
message HeuristicRequest {
  // Vocabulary strings which we want ids for
  repeated string vocabulary = 1;

  // Set the negated conjecture clauses.  May be left empty to reuse the
  // previous value.
  repeated FastClause negated_conjecture = 2;

  // Clauses to evaluate all the way to logits
  repeated FastClause clauses = 3;
}

// Reply from sandbox to sandboxee with requested information
message HeuristicResponse {
  // Vocabulary ids (response to vocabulary)
  repeated int32 vocab_ids = 1;

  // Logits (response to negated_conjecture_embedding and clauses)
  repeated float logits = 2;
}
