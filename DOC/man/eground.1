.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.3.
.TH EGROUND "1" "May 2024" "eground 3.1.0" "User Commands"
.SH NAME
eground \- manual page for eground 3.1.0
.SH SYNOPSIS
.B eground
[\fI\,options\/\fR] [\fI\,files\/\fR]
.SH DESCRIPTION
eground 3.1.0
.PP
Read a set of clauses and determine if it can be grounded (i.e. is
either already ground or has no non\-constant function symbols). If
this is the case, print sufficiently many ground instances of the
clauses to guarantee that a ground refutation can be found for
unsatisfiable clause sets.
.PP
Options
.HP
\fB\-h\fR
.HP
\fB\-\-help\fR
.IP
Print a short description of program usage and options.
.HP
\fB\-\-version\fR
.IP
Print the version number of the program.
.HP
\fB\-v\fR
.HP
\fB\-\-verbose[=\fR<arg>]
.IP
Verbose comments on the progress of the program by printing technical
information to stderr. The short form or the long form without the
optional argument is equivalent to \fB\-\-verbose\fR=\fI\,1\/\fR.
.HP
\fB\-o\fR <arg>
.HP
\fB\-\-output\-file=\fR<arg>
.IP
Redirect output into the named file.
.HP
\fB\-s\fR
.HP
\fB\-\-silent\fR
.IP
Equivalent to \fB\-\-output\-level\fR=\fI\,0\/\fR.
.HP
\fB\-l\fR <arg>
.HP
\fB\-\-output\-level=\fR<arg>
.IP
Select an output level, greater values imply more verbose output. Level 0
produces nearly no output except for the final clauses, level 1 produces
minimal additional output. Higher levels are without meaning in eground
(I think).
.HP
\fB\-\-print\-statistics\fR
.IP
Print a short statistical summary of clauses read and generated.
.HP
\fB\-R\fR
.HP
\fB\-\-resources\-info\fR
.IP
Give some information about the resources used by the system. You will
usually get CPU time information. On systems returning more information
with the rusage() system call, you will also get information about memory
consumption.
.HP
\fB\-\-suppress\-result\fR
.IP
Suppress actual printing of the result, just give a short message about
success. Useful mainly for test runs.
.HP
\fB\-\-lop\-in\fR
.IP
Set E\-LOP as the input format. If no input format is selected by this or
one of the following options, E will guess the input format based on the
first token. It will almost always correctly recognize TPTP\-3, but it may
misidentify E\-LOP files that use TPTP meta\-identifiers as logical
symbols.
.HP
\fB\-\-tptp\-in\fR
.IP
Parse TPTP\-2 format instead of E\-LOP (except includes, which are handles
as in TPTP\-3, as TPTP\-2 include syntax is considered harmful).
.HP
\fB\-\-tptp\-out\fR
.IP
Print TPTP\-2 format instead of E\-LOP.
.HP
\fB\-\-tptp\-format\fR
.IP
Equivalent to \fB\-\-tptp\-in\fR and \fB\-\-tptp\-out\fR.
.HP
\fB\-\-tptp2\-in\fR
.IP
Synonymous with \fB\-\-tptp\-in\fR.
.HP
\fB\-\-tptp2\-out\fR
.IP
Synonymous with \fB\-\-tptp\-out\fR.
.HP
\fB\-\-tptp2\-format\fR
.IP
Synonymous with \fB\-\-tptp\-format\fR.
.HP
\fB\-\-tstp\-in\fR
.IP
Parse TPTP\-3 format instead of E\-LOP (Note that TPTP\-3 syntax is still
under development, and the version implemented may not be fully
conformant at all times. It works on all TPTP 3.0.1 input files
(including includes).
.HP
\fB\-\-tstp\-out\fR
.IP
Print output clauses in TPTP\-3 syntax.
.HP
\fB\-\-tstp\-format\fR
.IP
Equivalent to \fB\-\-tstp\-in\fR and \fB\-\-tstp\-out\fR.
.HP
\fB\-\-tptp3\-in\fR
.IP
Synonymous with \fB\-\-tstp\-in\fR.
.HP
\fB\-\-tptp3\-out\fR
.IP
Synonymous with \fB\-\-tstp\-out\fR.
.HP
\fB\-\-tptp3\-format\fR
.IP
Synonymous with \fB\-\-tstp\-format\fR.
.HP
\fB\-d\fR
.HP
\fB\-\-dimacs\fR
.IP
Print output in the DIMACS format suitable for many propositional
provers.
.HP
\fB\-\-definitional\-cnf[=\fR<arg>]
.IP
Tune the clausification algorithm to introduces definitions for
subformulae to avoid exponential blow\-up. The optional argument is a
fudge factor that determines when definitions are introduced. 0 disables
definitions completely. The default works well. The option without the
optional argument is equivalent to \fB\-\-definitional\-cnf\fR=\fI\,24\/\fR.
.HP
\fB\-\-old\-cnf[=\fR<arg>]
.IP
As the previous option, but use the classical, well\-tested clausification
algorithm as opposed to the newewst one which avoides some algorithmic
pitfalls and hence works better on some exotic formulae. The two may
produce slightly different (but equisatisfiable) clause normal forms. The
option without the optional argument is equivalent to \fB\-\-old\-cnf\fR=\fI\,24\/\fR.
.HP
\fB\-\-miniscope\-limit[=\fR<arg>]
.IP
Set the limit of variables to miniscope per input formula. The build\-in
default is 1000. Only applies to the new (default) clausification
algorithm The option without the optional argument is equivalent to
\fB\-\-miniscope\-limit\fR=\fI\,2147483648\/\fR.
.HP
\fB\-\-split\-tries[=\fR<arg>]
.IP
Determine the number of tries for splitting. If 0, no splitting is
performed. If 1, only variable\-disjoint splits are done. Otherwise, up to
the desired number of variable permutations is tried to find a splitting
subset. The option without the optional argument is equivalent to
\fB\-\-split\-tries\fR=\fI\,1\/\fR.
.HP
\fB\-U\fR
.HP
\fB\-\-no\-unit\-subsumption\fR
.IP
Do not check if clauses are subsumed by previously encountered unit
clauses.
.HP
\fB\-r\fR
.HP
\fB\-\-no\-unit\-resolution\fR
.IP
Do not perform forward\-unit\-resolution on new clauses.
.HP
\fB\-t\fR
.HP
\fB\-\-no\-tautology\-detection\fR
.IP
Do not perform tautology deletion on new clauses.
.HP
\fB\-m\fR <arg>
.HP
\fB\-\-memory\-limit=\fR<arg>
.IP
Limit the memory the system may use. The argument is the allowed amount
of memory in MB. This option may not work everywhere, due to broken
and/or strange behaviour of setrlimit() in some UNIX implementations. It
does work under all tested versions of Solaris and GNU/Linux.
.HP
\fB\-\-cpu\-limit[=\fR<arg>]
.IP
Limit the cpu time the program should run. The optional argument is the
CPU time in seconds. The program will terminate immediately after
reaching the time limit, regardless of internal state. This option may
not work everywhere, due to broken and/or strange behaviour of
setrlimit() in some UNIX implementations. It does work under all tested
versions of Solaris, HP\-UX and GNU/Linux. As a side effect, this option
will inhibit core file writing. The option without the optional argument
is equivalent to \fB\-\-cpu\-limit\fR=\fI\,300\/\fR.
.HP
\fB\-\-soft\-cpu\-limit[=\fR<arg>]
.IP
Limit the cpu time spend in grounding. After the time expires, the prover
will print an partial system. The option without the optional argument is
equivalent to \fB\-\-soft\-cpu\-limit\fR=\fI\,310\/\fR.
.HP
\fB\-i\fR
.HP
\fB\-\-add\-one\-instance\fR
.IP
If the grounding procedure runs out of time or memory, try to add at
least one instance of each clause to the set. This might fail for  really
large clause sets, since the reserve memory kept for this purpose may be
insufficient.
.HP
\fB\-g\fR <arg>
.HP
\fB\-\-give\-up=\fR<arg>
.IP
Give up early if the problem is unlikely to be reasonably small. If run
without constraints, the program will give up if the clause with the
largest number of instances will be expanded into more than this number
of instances. If run with constraints, the program keeps a running count
and will terminate if the estimated total number of clauses would exceed
this value . A value of 0 will leave this test disabled.
.HP
\fB\-c\fR
.HP
\fB\-\-constraints\fR
.IP
Use global purity constraints to restrict the number of instantiations
done.
.HP
\fB\-C\fR
.HP
\fB\-\-local\-constraints\fR
.IP
Use local purity constraints to further restrict the number of
instantiations done. Implies the previous option. Not yet implemented!
Note to self: Split clauses need to get fresh variables if this is to
work!
.HP
\fB\-M\fR
.HP
\fB\-\-fix\-minisat\fR
.IP
Fix the preamble to include only the maximum variable index, to
compensate for MiniSAT's problematic interpretation of the DIMAC syntax.
.SH "REPORTING BUGS"
.PP
Report bugs to <schulz@eprover.org>. Please include the following, if
possible:
.PP
* The version of the package as reported by \fBeprover \-\-version\fR.
.PP
* The operating system and version.
.PP
* The exact command line that leads to the unexpected behaviour.
.PP
* A description of what you expected and what actually happened.
.PP
* If possible all input files necessary to reproduce the bug.
.SH COPYRIGHT
Copyright 1998\-2024 by Stephan Schulz, schulz@eprover.org,
and the E contributors (see DOC/CONTRIBUTORS).
.PP
This program is a part of the distribution of the equational theorem
prover E. You can find the latest version of the E distribution
as well as additional information at
http://www.eprover.org
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License
along with this program (it should be contained in the top level
directory of the distribution in the file COPYING); if not, write to
the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
Boston, MA  02111\-1307 USA
.PP
The original copyright holder can be contacted via email or as
.PP
Stephan Schulz
DHBW Stuttgart
Fakultaet Technik
Informatik
Lerchenstrasse 1
70174 Stuttgart
Germany
